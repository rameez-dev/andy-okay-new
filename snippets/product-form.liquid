{%- comment -%}
Those are the option names for which we automatically detect swatch. For the color, we use them to display a swatch, while
for size, we use it to display a size chart (if applicable)
{%- endcomment -%}
  
<style>
  .cart-animation {
    width: 25px;
    height: 25px;
    border-radius: 50%; 
    position: absolute;
    display: block;
    z-index: 15;
    text-align: center;
    line-height: 25px;
    background: #39b975!important;
    color: #fff!important;
    font-weight: 700;
    border: 3px solid #39b975;
    font-size: 16px;
  }
  #cart-popup-overlay {
    position: fixed;
    display: none;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0,0,0,0.5);
    z-index: 2;
    cursor: pointer;
  }
  .xs-p-wrap {
    padding: 40px 0px;
    padding-top: 20px;
    margin-top: 25px;
  }
  @media screen and (max-width: 767px) {
    .xs-p-wrap {
      margin-top: 20px;
    }
  }
  .xs-p-text {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 10px 0px;
  }
  @media screen and (max-width: 767px) {
    .xs-p-text {
      align-items: start;
    }
  }

  .xs-p-text span {
    font-weight: bold;
    font-size: 1.4em;
  }

  .xs-p-text span:first-child {
    font-weight: 500;
    font-size: 1.5em;
  }
  .xs-pwyw {
    width: 100%;
  }
  #xs-price-range {
    width: 100%;
    /*             position: absolute; */
    top: 50%;
    left: 50%;
    -webkit-transform: translate(-50%, -50%);
    -moz-transform: translate(-50%, -50%);
    -o-transform: translate(-50%, -50%);
    -ms-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
    border: 0;
    height: 6px;
    background: #bababa;
    outline: none;
    border-radius:0px;
  }
  .ui-corner-all{
    border-radius:0px;
  }
  #xs-price-range .ui-slider-handle {
    position: relative;
    border-radius: 100%;
    background: {{ section.settings.pwyw_btn_color }};
    border: 0;
    height: 40px;
    width: 40px;
    outline: none;
    cursor: pointer;
    top: 50%;
    transform: translate(-25%, -50%);
    box-shadow: 0px 3px 3px -2px #585858;
    border: 0px solid #eee;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  #xs-price-range #mark-1{
    z-index:25;
  }
  #xs-price-range #mark-2{
    z-index:24;
  }
  #xs-price-range #mark-3{
    z-index:23;
  }
  #xs-price-range .ui-slider-handle:hover,
  #xs-price-range .ui-slider-handle:focus {
    -webkit-transform: scale(1.1);
    -moz-transform: translate(-25%, -50%) scale(1.1);
    -o-transform: translate(-25%, -50%) scale(1.1);
    -ms-transform: translate(-25%, -50%) scale(1.1);
    transform: translate(-25%, -50%) scale(1.1);
  }
  #xs-price-range .ui-slider-range {
    background: {{ section.settings.pwyw_btn_color }};
  }
  #xs-price-range #xs-currentVal {
    /*             position: absolute;
    font-size: 12px;
    font-weight: bold;
    color: #b8b8b8;
    width: 160px;
    text-align: center;
    margin-top: -40px; */
  }
  span.xs-r-arrows {
    font-size: 20px;
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 100%;
    padding: 0px 10px;
  }

  span.xs-r-arrows i:first-child {
    margin-right: 5px;
  }
  .ProductMeta__PriceList {
    display: none;
  }
  .xs-marks-container {
    position: relative;
    left: 0;
    right: 0;
    border: 1px solid transparent;
    top: -3px;
  }
  .xs-mark {
    width: 1px;
    height: 20px;
    /*background: #5d5d5d;*/
    position: absolute;
    bottom: 0;
    z-index: 2;
    display: flex;
    justify-content: center;
  }
  .xs-mark .label-1 {
    position: absolute;
    width: max-content;
    display: inline-table;
    bottom: 17px;
    padding: 4px 7px;
    font-size: 9px;
    color: #ffffff;
    border: 1px solid gray;
    text-transform: initial;
    border-radius: 5px;
    letter-spacing: 0;  
    background:transparent;
  }
  .xs-mark .label-1:after{
    width: 0; 
    height: 0; 
    border-left: 8px solid transparent;
    border-right: 8px solid transparent;
    content:"";
    position:absolute;
    left:0;
    right:0;
    margin:0px auto;
    bottom:-8px;
    border-top: 8px solid #354c34;
  }
  .xs-mark .label-1:before{
    width: 0; 
    height: 0; 
    border-left: 8px solid transparent;
    border-right: 8px solid transparent;
    content:"";
    position:absolute;
    left:0;
    right:0;
    margin:0px auto;
    bottom:-8px;
    border-top: 8px solid #354c34;
    z-index:1;
  }

  .xs-mark .label-2 {
    position: absolute;
    width: max-content;
    display: inline-table;
    bottom: 17px;
    padding: 4px 7px;
    font-size: 9px;
    color: #ffffff;
    border: 1px solid gray;
    text-transform: initial;
    border-radius: 5px;
    letter-spacing: 0;  
    background:transparent;
  }
  .xs-mark .label-2:after{
    width: 0; 
    height: 0; 
    border-left: 8px solid transparent;
    border-right: 8px solid transparent;
    content:"";
    position:absolute;
    left:0;
    right:0;
    margin:0px auto;
    bottom:-8px;
    border-top: 8px solid #2c4a58;
  }
  .xs-mark .label-2:before{
    width: 0; 
    height: 0; 
    border-left: 8px solid transparent;
    border-right: 8px solid transparent;
    content:"";
    position:absolute;
    left:0;
    right:0;
    margin:0px auto;
    bottom:-8px;
    border-top: 8px solid #2c4a58;

  }

  .xs-mark .label-3 {
    position: absolute;
    width: max-content;
    display: inline-table;
    bottom: 17px;
    padding: 4px 7px;
    font-size: 9px;
    color: #ffffff;
    border: 1px solid gray;
    text-transform: initial;
    border-radius: 5px;
    letter-spacing: 0;  
    background:transparent;
  }
  .xs-mark .label-3:after{
    width: 0; 
    height: 0; 
    border-left: 8px solid transparent;
    border-right: 8px solid transparent;
    content:"";
    position:absolute;
    left:0;
    right:0;
    margin:0px auto;
    bottom:-8px;
    border-top: 8px solid #2c4a58;
  }
  .xs-mark .label-3:before{
    width: 0; 
    height: 0; 
    border-left: 8px solid transparent;
    border-right: 8px solid transparent;
    content:"";
    position:absolute;
    left:0;
    right:0;
    margin:0px auto;
    bottom:-8px;
    border-top: 8px solid #2c4a58;

  }

  .xs-mark .label-1.active-1 {
    background: #74d070 !important;
    border: 1px solid #74d070 !important;
  }
  .xs-mark .label-1.active-1:before{
    border-top: 8px solid #74d070;
  }
  .xs-mark .label-2.active-2 {
    background: #6dbff2 !important;
    border: 1px solid #6dbff2 !important;
  }
  .xs-mark .label-2.active-2:after{
    border-top: 8px solid #6dbff2;
  }
  .xs-mark .label-3.active-3 {
    background: #6dbff2  !important;
    border: 1px solid #6dbff2 !important;
  }
  .xs-mark .label-3.active-3:after{
    border-top: 8px solid #6dbff2;
  }

  #label-mark-1 {
    background: #354c34;
    border: 1px solid #354c34;
  }
  #label-mark-2 {
    background: #2c4a58;
    border: 1px solid #2c4a58;
  }
  #label-mark-3 {
    background: #2c4a58;
    border: 1px solid #2c4a58;
  }

  .xs-mark .label.active:after{
    border-left: 8px solid transparent;
    border-right: 8px solid transparent;
    border-top: 8px solid #41a84f;
  }
  .xs-mark .label.active:before{
    display:none;
  }

  .delivery-message {
    margin: 10px 0;
    font-size: 15px;
    font-family: "DIN Next LT Pro Cond";
    font-weight: 500;
    font-style: normal;
    color: #fff;
  }
</style>

<script src="https://cdnjs.cloudflare.com/ajax/libs/prefixfree/1.0.7/prefixfree.min.js"></script>
{%- assign color_label = 'color,colour,couleur,colore,farbe,색,色,färg,farve' | split: ',' -%}
{%- assign size_label = 'size,taille,bröße,tamanho,tamaño,koko,サイズ' | split: ',' -%}

{%- assign size_chart_page = '' -%}
{%- assign product_popovers = '' -%}
{%- assign show_option_label = false -%}

{%- assign selected_variant = product.selected_or_first_available_variant -%}

{%- form 'product', product, class: 'ProductForm' -%}
  <span id ="size-chart" class="size__ChartLink">Size Chart</span>
  <div class="ProductForm__Variants">
    {%- unless product.has_only_default_variant -%}
      {%- for option in product.options_with_values -%}
        {%- assign downcase_option = option.name | downcase -%}

        {%- if section.settings.selector_mode == 'block' or color_label contains downcase_option and section.settings.show_color_swatch -%}
          {%- assign show_option_label = true -%}
        {%- endif -%}
      {%- endfor -%}

      {%- for option in product.options_with_values -%}
        {%- assign downcase_option = option.name | downcase -%}
        {%- capture popover_id -%}popover-{{ product.id }}-{{ section.id }}-{{ option.name | handle }}{%- endcapture -%}

        <div class="ProductForm__Option {% if show_option_label %}ProductForm__Option--labelled{% endif %}">
          {%- if show_option_label -%}
            {%- assign size_chart_page = pages['size-chart'] -%}

            <span class="ProductForm__Label">
              

              {% if color_label contains downcase_option and section.settings.show_color_swatch %}
                <span class="ProductForm__SelectedValue">{{ option.selected_value }}</span>
              {% endif %}

              {%- if size_label contains downcase_option and size_chart_page != empty -%}
                <button type="button" class="ProductForm__LabelLink Link Text--subdued" data-action="open-modal" aria-controls="modal-{{ size_chart_page.handle }}">
                {{- 'product.form.size_chart' | t -}}
              </button>
              {%- endif -%}
            </span>
          {%- endif -%}

          {%- if color_label contains downcase_option and section.settings.show_color_swatch -%}
            <ul class="ColorSwatchList HorizontalList HorizontalList--spacingTight">
              {%- for value in option.values -%}
                {%- assign downcase_value = value | downcase -%}

                <li class="HorizontalList__Item">
                  {%- assign color_swatch_name = value | handle | append: '.png' -%}
                  {%- assign color_swatch_image = images[color_swatch_name] -%}

                  <input id="option-{{ section.id }}-{{ forloop.parentloop.index0 }}-{{ forloop.index0 }}" class="ColorSwatch__Radio" type="radio" name="option-{{ forloop.parentloop.index0 }}" value="{{ value | escape }}" {% if value == option.selected_value %}checked="checked"{% endif %} data-option-position="{{ option.position }}">
                  <label for="option-{{ section.id }}-{{ forloop.parentloop.index0 }}-{{ forloop.index0 }}" class="ColorSwatch ColorSwatch--large {% if downcase_value == 'white' %}ColorSwatch--white{% endif %}" data-tooltip="{{ value | escape }}" style="background-color: {{ value | replace: ' ', '' | downcase }}; {% if color_swatch_image != blank %}background-image: url({{ color_swatch_image | img_url: '64x64' }}){% endif %}">
                    <span class="u-visually-hidden">{{ value }}</span>
                  </label>
                </li>  
              {%- endfor -%}
            </ul>
          {%- elsif section.settings.selector_mode == 'block' -%}
            {% assign size_class = ' ' %}
            {% assign sizes_count = 0 %}
            {%- for value in option.values -%}
              {% assign sizes_count = sizes_count | plus: 1 %}
            {%- endfor -%}
            {% if sizes_count == 1 %}
              {% assign size_class = 'tabList1x' %}
            {% elsif sizes_count == 3 %}
              {% assign size_class = 'tabList3x' %}
            {% else %}
              {% assign size_class = '' %}
            {% endif %}
         
           	<div class="SizeSwatchList__tabs {{size_class}}">
              {%- for value in option.values -%}
              {% assign variant_values = value | split: ' ' %}
                <input id="option-{{ section.id }}-{{ forloop.parentloop.index0 }}-{{ forloop.index0 }}" type="radio" name="option-{{ forloop.parentloop.index0 }}" value="{{ value | escape }}" {% if value == option.selected_value %}checked="checked"{% endif %} data-option-position="{{ option.position }}">
                 {%- assign downcase_variant_first = variant_values.first | downcase -%}
                {% if downcase_variant_first == 'x-large' %}
                  {% assign dot_class = 's_circle__sep-left' %}
                {% endif %}
                <label for="option-{{ section.id }}-{{ forloop.parentloop.index0 }}-{{ forloop.index0 }}" class="SizeSwatchList__label {{ downcase_variant_first }} {{ dot_class }}">{{ variant_values.first | capitalize }}
                  {% if variant_values[1] != variant_values.last %}
                  <span class="SizeSwatchList__size" style="bottom:-25px;">{{variant_values[1]}} / {{variant_values.last}}</span>
                  {% else %}
                    <span class="SizeSwatchList__size" style="bottom:-25px; ">{{variant_values.last}}</span>
                  {% endif %}
                </label> 
              {%- endfor -%}
              <span class="glider"></span>
            </div>
          {%- else -%}
            <button type="button" class="ProductForm__Item" aria-expanded="false" aria-controls="{{ popover_id }}">
              <span class="ProductForm__OptionName">{% unless show_option_label %}{{ option.name }}: {% endunless %}<span class="ProductForm__SelectedValue">{{ option.selected_value }}</span></span>
              {%- include 'icon' with 'select-arrow' -%}
            </button>

            {%- capture popover_html -%}
              {%- if color_label contains downcase_option and section.settings.show_color_carousel -%}
                {%- for value in option.values -%}
                  {%- if value == option.selected_value -%}
                    {%- assign initial_image_index = forloop.index0 -%}
                    {%- break -%}
                  {%- endif -%}  
                {%- endfor -%}

                {%- capture flickity_options -%}
                {
                  "prevNextButtons": true,
                  "pageDots": true,
                  "initialIndex": {{ initial_image_index }},
                  "arrowShape": {"x0": 20, "x1": 60, "y1": 40, "x2": 60, "y2": 35, "x3": 25}
                }
                {%- endcapture -%}

                <div id="{{ popover_id }}" class="VariantSelector" aria-hidden="true">
                  {%- capture option_index -%}option{{ option.position }}{%- endcapture -%}

                  <div class="VariantSelector__Carousel Carousel" data-flickity-config='{{ flickity_options }}'>
                    {%- for value in option.values -%}
                      {%- for variant in product.variants -%}

                        {%- if variant[option_index] == value -%}
                          {%- assign variant_image = variant.image | default: product.featured_image -%}
                          {%- break -%}
                        {%- endif -%}        
                      {%- endfor -%}

                      <div class="VariantSelector__Item Carousel__Cell {% if value == option.selected_value %}is-selected{% endif %}"
                           data-background-color="{{ value | split: ' ' | last | handle }}"
                           data-background-image="{{ value | handle | append: '.png' | asset_url }}"
                           data-option-position="{{ option.position }}"
                           data-option-value="{{ value | escape }}">
                        <div class="VariantSelector__ImageWrapper AspectRatio AspectRatio--withFallback" style="max-width: {{ variant_image.width }}px; padding-bottom: {{ 100.0 | divided_by: variant_image.aspect_ratio }}%; --aspect-ratio: {{ variant_image.aspect_ratio }}">
                          {%- include 'image-size', sizes: '200,400,600,800', image: variant_image -%}
                          {%- assign image_url = variant_image | img_url: '1x1' | replace: '_1x1.', '_{width}x.' -%}

                          <img class="VariantSelector__Image Image--lazyLoad Image--fadeIn" data-src="{{ image_url }}" data-widths="[{{ supported_sizes }}]" data-sizes="auto" alt="{{ variant_image.alt | escape }}">
                          <span class="Image__Loader"></span>
                        </div>
                      </div>  
                    {%- endfor -%}
                  </div>

                  <div class="VariantSelector__Info">
                    <div class="VariantSelector__ChoiceList">
                      {%- for value in option.values -%}
                        {%- assign min_price_for_variant = product.price_max -%}

                        {%- for variant in product.variants -%}
                          {%- if variant[option_index] == value -%}
                            {%- assign min_price_for_variant = min_price_for_variant | at_most: variant.price -%}
                          {%- endif -%}
                        {%- endfor -%}

                        <div class="VariantSelector__Choice {% if value == option.selected_value %}is-selected{% endif %}">
                          <div class="VariantSelector__ChoiceColor">
                            {%- assign downcase_value = value | downcase -%}

                            {%- assign color_swatch_name = value | handle | append: '.png' -%}
                            {%- assign color_swatch_image = images[color_swatch_name] -%}

                            <span class="VariantSelector__ColorSwatch {% if downcase_value == 'white' %}VariantSelector__ColorSwatch--white{% endif %}" style="background-color: {{ value | replace: ' ', '' | downcase }}; {% if color_swatch_image != blank %}background-image: url({{ color_swatch_image | img_url: '64x64' }}){% endif %}"></span>
                            <span class="VariantSelector__ChoiceValue">{{ value }}</span>
                          </div>

                          <div class="VariantSelector__ChoicePrice">
                            {%- if available_prices_for_option_value.size > 1 -%}
                              {%- capture formatted_min_price -%}<span data-money-convertible>{{ min_price_for_variant | money_without_trailing_zeros }}</span>{%- endcapture -%}
                              <span class="Heading Text--subdued">{{ 'product.form.from_price_html' | t: min_price: formatted_min_price }}</span>
                            {%- else -%}
                              <span class="Heading Text--subdued" data-money-convertible>{{ min_price_for_variant | money_without_trailing_zeros }}</span>
                            {%- endif -%}
                          </div>
                        </div> 
                      {%- endfor -%}
                    </div>

                    <button type="button" class="VariantSelector__Button Button Button--primary Button--full" data-action="select-variant">{{- 'product.form.select_model' | t -}}</button>
                  </div>
                </div>
              {%- else -%}
                <div id="{{ popover_id }}" class="OptionSelector Popover Popover--withMinWidth" aria-hidden="true">
                  <header class="Popover__Header">
                    <button type="button" class="Popover__Close Icon-Wrapper--clickable" data-action="close-popover">{% include 'icon' with 'close' %}</button>
                    <span class="Popover__Title Heading u-h4">{{ option.name | escape }}</span>
                  </header>

                  <div class="Popover__Content">
                    <div class="Popover__ValueList" data-scrollable>
                      {%- for value in option.values -%}
                        <button type="button" class="Popover__Value {% if value == option.selected_value %}is-selected{% endif %} Heading Link Link--primary u-h6"
                                data-value="{{ value | escape }}"
                                data-option-position="{{ option.position }}"
                                data-action="select-value">
                          {{- value | escape -}}
                        </button> 
                      {%- endfor -%}
                    </div>

                    {%- assign size_chart_page = pages['size-chart'] -%}

                    {%- if show_option_label == false and size_label contains downcase_option and size_chart_page != empty -%}
                      <button type="button" class="Popover__FooterHelp Heading Link Link--primary Text--subdued u-h6" data-action="open-modal" aria-controls="modal-{{ size_chart_page.handle }}">
                        {{- 'product.form.size_chart' | t -}}
                      </button>
                    {%- endif -%}
                  </div>
                </div>
              {%- endif -%}
            {%- endcapture -%}

            {%- assign product_popovers = product_popovers | append: popover_html -%}
          {%- endif -%}
        </div>
      {%- endfor -%}

      <div class="no-js ProductForm__Option">
        <div class="Select Select--primary">
          {%- include 'icon' with 'select-arrow' -%}

          <select id="product-select-{{ product.id }}" name="id" title="Variant">
            {%- for variant in product.variants -%}
              <option {% if variant == selected_variant %}selected="selected"{% endif %} {% unless variant.available %}disabled="disabled"{% endunless %} value="{{ variant.id }}" data-sku="{{ variant.sku }}">{{ variant.title }} - {{ variant.price | money }}</option>
            {%- endfor -%}
          </select>
        </div>
      </div>
    {%- else -%}
      <input type="hidden" name="id" data-sku="{{ selected_variant.sku }}" value="{{ selected_variant.id }}">
    {%- endunless -%}
    
    
    {% unless template contains "paywhatyouwant" %}
    
      {%- if section.settings.show_quantity_selector -%}
        {%- if show_option_label -%}
          <span class="ProductForm__Label">{{ 'product.form.quantity' | t }}:</span>
        {%- endif -%}

        <div class="ProductForm__QuantitySelector">
          <div class="QuantitySelector QuantitySelector--large">
            {%- assign quantity_minus_one = line_item.quantity | minus: 1 -%}

            <span class="QuantitySelector__Button Link Link--secondary" data-action="decrease-quantity">{% include 'icon' with 'minus' %}</span>
            <input type="text" class="QuantitySelector__CurrentQuantity" pattern="[0-9]*" name="quantity" value="1">
            <span class="QuantitySelector__Button Link Link--secondary" data-action="increase-quantity">{% include 'icon' with 'plus' %}</span>
          </div>
        </div>
      {%- else -%}
        <input type="hidden" name="quantity" value="1">
      {%- endif -%}

    {% else %}
    <link href="//ajax.googleapis.com/ajax/libs/jqueryui/1.11.2/themes/smoothness/jquery-ui.css" rel="stylesheet" />
    <link href="//stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" />

    <script src="//ajax.googleapis.com/ajax/libs/jqueryui/1.11.2/jquery-ui.min.js"></script>

    <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/jqueryui-touch-punch/0.2.3/jquery.ui.touch-punch.min.js"></script>
    {{ 'api.jquery.js' | shopify_asset_url | script_tag }}
    
    
    
    <div class="product__cart--form">

    <div class="xs-pwyw">
      <div class="xs-p-text">
        <span class="cart_chose_price_text">Slide to choose price<i class="question_mark--icon">?</i></span>
        <div id="cart-popup-overlay">
        </div>
        <div class="price_value">
          <span id="xs-currentVal" data-money-convertible>{{ product.variants.first.price | money_without_trailing_zeros }}</span>
          {% if product.variants.first.compare_at_price != null and product.variants.first.compare_at_price != 0 %}
          <span id ="compare_at_price_style" data-money-convertible>{{ product.variants.first.compare_at_price | money_without_trailing_zeros }}</span>
          {% endif %}
        </div>
      </div>
      
      <div class="xs-p-wrap">
        <div id="xs-price-range">
          {% for block in section.blocks %}
          {% if block.type == 'product-marks' %}
            {% if block.settings.product_handle == product.handle%}
                <div class="xs-marks-container">
                  {% if block.settings.show_mark_1 and block.settings.amount_1 != blank and block.settings.label_1 != blank %}
                    <div class="xs-mark" id="mark-1" data-mark-amount="{{ block.settings.amount_1 }}">
                      <span class="label-1" id="label-mark-1">{{ block.settings.label_1 }}</span>
                    </div>
                  {% endif %}
                  {% if block.settings.show_mark_2 and block.settings.amount_2 != blank and block.settings.label_2 != blank %}
                    <div class="xs-mark" id="mark-2" data-mark-amount="{{ block.settings.amount_2 }}">
                      <span class="label-2" id="label-mark-2">{{ block.settings.label_2 }}</span>
                    </div>
                  {% endif %}
                  {% if block.settings.show_mark_3 and block.settings.amount_3 != blank and block.settings.label_3 != blank %}
                    <div class="xs-mark" id="mark-3" data-mark-amount="{{ block.settings.amount_3 }}">
                      <span class="label-3" id="label-mark-3">{{ block.settings.label_3 }}</span>
                    </div>
                  {% endif %}
                </div>
            {% endif %}
          {% endif %}
        {% endfor %}
        </div>
        
      </div>
    </div>
    <button type="button" id="xs-pay-btn" class="product__add-to-cart button ProductForm__AddToCart Button Button--primary Button--full">
      <span class="add-to-cart__text" >Add to cart</span>
      <div class="cart-animation" style="display:none">1</div>
    </button>
    <h6 class="delivery-message">
      <div class='geotargetlygeocontent1629294920005'>
        <!-- Content will render here -->
 </div>
      <span class="delivery-message-text" style="color: #a6967c;">20000+ sold</span> <span class="delivery-message-text" style="color: #bababa;"> | </span> <span class="delivery-message-text" style="color: #55a194;"> Fast & traceable delivery in 3-5 days<br></span>
      <span id="add-to-cart-link"></span>
    </h6>
      
    </div>
    {% assign counter = 0 %}
    <form action="#">
      <div class="acc__card">
        <div class="acc__title">Adjust Charity:</div>        
        <div class="acc__panel">
          {% for block in section.blocks %}
          {% if block.type == 'donation' %}
           {% if block.settings.product_handle == product.handle%}
           {% assign counter = counter | plus: 1 %}
              {% if block.settings.donation_1 and block.settings.label_1 != blank %}
          		<div class="custom-radio">
                	<input required class="required" id="test1" type="radio" name="properties[Adjust donation]" value="{{ block.settings.label_1 }}"> <label for="test1">{{ block.settings.label_1 }}</label>
          		</div>
              {% endif %}
              
              {% if block.settings.donation_2 and block.settings.label_2 != blank %}
          		<div class="custom-radio">
                	<input required class="required" id="test2" type="radio" name="properties[Adjust donation]" value="{{ block.settings.label_2 }}"> <label for="test2">{{ block.settings.label_2 }}</label>
          		</div>
              {% endif %}

              {% if block.settings.donation_3 and block.settings.label_3 != blank %}
          		<div class="custom-radio">
                	<input required class="required" id="test3" type="radio" name="properties[Adjust donation]" value="{{ block.settings.label_3 }}"> <label for="test3">{{ block.settings.label_3 }}</label>
          		</div>
              {% endif %}

              {% if block.settings.donation_4 and block.settings.label_4 != blank %}
          		<div class="custom-radio">
                	<input required class="required" id="test4" type="radio" name="properties[Adjust donation]" value="{{ block.settings.label_4 }}"> <label for="test4">{{ block.settings.label_4 }}</label>
          		</div>
              {% endif %}

              {% if block.settings.donation_5 and block.settings.label_5 != blank %}
          		<div class="custom-radio">
                	<input required class="required" id="test5" type="radio" name="properties[Adjust donation]" value="{{ block.settings.label_5 }}"> <label for="test5">{{ block.settings.label_5 }}</label>
          		</div>
              {% endif %}

              {% if block.settings.donation_6 and block.settings.label_6 != blank %}
          		<div class="custom-radio">
                	<input required class="required" id="test6" type="radio" name="properties[Adjust donation]" value="{{ block.settings.label_6 }}"> <label for="test6">{{ block.settings.label_6 }}</label>
          		</div>
              {% endif %} 

            {% endif %}
          {% endif %}
          {% endfor %}
      </div>
     </div>
    </form>
    <script>
      const xs_format = "{{ shop.money_format }}";
      const xs_product_id = "{{product.id }}";
    </script>
    {% assign has_max_price = false %}

    {% for tag in product.tags %}
    {% if tag contains "xs_max" %}
    {% assign has_max_price = true %}
    {% assign max_price = tag  | split: "-"  |last %}
    {% endif %}
    {% endfor %}
    
    <script>
      window.xVariants = {};
      {% for variant in product.variants %}
      xVariants["{{ variant.id }}"] = {{ variant | json }};
                {% endfor %}
    </script>
    <script>
      var cm_at_final_discount = 0;
      $(document).ready(function(){
        var xs_product_id = "{{product.id }}";
        
        if('{{counter}}' < '1')
        { 
          $('.acc__card').css("display", "none");
        }
        function changeMarksState(value) {
          var current_value = value / 100;

          if ($("#mark-1").length > 0) {
            var mark1_amount = $("#mark-1").data("mark-amount");
            if (current_value >= mark1_amount) {
              $("#mark-1 .label-1").addClass("active-1");
            } else {
              $("#mark-1 .label-1").removeClass("active-1");
            }
          }

          if ($("#mark-2").length > 0) {
            var mark2_amount = $("#mark-2").data("mark-amount");
            if (current_value >= mark2_amount) {
              $("#mark-2 .label-2").addClass("active-2");
              $("#mark-1").css("z-index", '20' );
            } else {
              $("#mark-2 .label-2").removeClass("active-2");
              $("#mark-1").css("z-index", '25' );
            }
          }

          if ($("#mark-3").length > 0) {
            var mark3_amount = $("#mark-3").data("mark-amount");
            if (current_value >= mark3_amount) {
              $("#mark-3 .label-3").addClass("active-3");
              $("#mark-2").css("z-index", '21' );
            } else {
              $("#mark-3 .label-3").removeClass("active-3");
              $("#mark-2").css("z-index", '24' );
            }
          }
        }

        $('#price-detail-desktop, #price-detail-mob').click(function(){
          $('.price-detail').addClass('visible');
          document.getElementById("cart-popup-overlay").style.display = "block";
        });
        $('#free-shipping').click(function(){
          $('.free-shipping').addClass('visible');
          document.getElementById("cart-popup-overlay").style.display = "block";
        });
        $('#free-art').click(function(){
          $('.free-art').addClass('visible');
          document.getElementById("cart-popup-overlay").style.display = "block";
        });
        $('#size-chart').click(function(){
          $('.size-chart').addClass('visible');
          document.getElementById("cart-popup-overlay").style.display = "block";
        });

        const arrows = $("<span class='xs-r-arrows'></span>").append('<div class="encircle bounce animated"> <div class="arrow"> </div> </div>');
        const slider = $("#xs-price-range");
        const productSelect = $('select[name="id"]');
        const xspw = $(".xs-pwyw");
        
        let xid = productSelect.val();
        
        if( xid == null ){
          xspw.hide();
        } else {
          //conversion of currency start
          var newCurrency = $('.CurrencySelector__Select').val();
          var xVariantPrice = Math.round(Currency.convert(xVariants[xid].price, 'USD', newCurrency));
          var xVariantCompare_at_price = Math.round(Currency.convert(xVariants[xid].compare_at_price, 'USD', newCurrency));
          var maxPrice = Math.round(Currency.convert('{{ max_price }}', 'USD', newCurrency));
          if(maxPrice == undefined){
            maxPrice = 10000;
          }else{
            maxPrice = maxPrice*100;
          }
          
          var a = 'amount_no_decimals';
          var amount = "{"+"{"+a+"}}";
          var moneyFormats = { 
            "USD": "$" + amount, 
            "EUR": "€" + amount, 
            "GBP": "£" + amount, 
            "CAD": "$" + amount, 
            "SEK": amount + " kr", 
            "DKK": amount + " kr", 
            "NOK": amount + " kr", 
            "AUD": "$" + amount 
          };
          var xs_format = moneyFormats[newCurrency] || '{{ amount }}';
          //conversion of currency end
          let iprice = xVariantPrice;
          slider.slider({
            range: "min",
            min: iprice,
            max: maxPrice,
            step: 100,
            value: iprice,
            slide: function(e, ui){
              $("#xs-currentVal").html((Shopify.formatMoney(ui.value, xs_format)).replace(/\.00$/,''));
              changeMarksState(ui.value);
              return;
            }
          });
          xspw.show();

          var minimum_price = iprice / 100;
          var maximum_price = maxPrice;
          maximum_price = maximum_price/100;
          var diff_in_price = maximum_price - minimum_price;
          var mark_1_price = $("#mark-1").data("mark-amount");
          var mark_2_price = $("#mark-2").data("mark-amount");
          var mark_3_price = $("#mark-3").data("mark-amount");

          var left_mark_1 = ((mark_1_price - minimum_price)*100)/diff_in_price;
          var left_mark_2 = ((mark_2_price - minimum_price)*100)/diff_in_price;
          var left_mark_3 = ((mark_3_price - minimum_price)*100)/diff_in_price;

          $("#mark-1").css("left", left_mark_1 + "%" );
          $("#mark-2").css("left", left_mark_2 + "%" );
          $("#mark-3").css("left", left_mark_3 + "%" );
        }
        $("#xs-currentVal").html((Shopify.formatMoney(xVariantPrice, xs_format)).replace(/\.00$/,'')); 
        $("#compare_at_price_style").html((Shopify.formatMoney(xVariantCompare_at_price, xs_format)).replace(/\.00$/,'')); 
        slider.slider("widget").find(".ui-slider-handle").first().append(arrows);
		    var cm_at_price = (Shopify.formatMoney(xVariantCompare_at_price, xs_format)).replace(/\.00$/,'');
        var cm_at_price_to_pass = (Shopify.formatMoney(xVariants[xid].compare_at_price, "{{ shop.money_format }}")).replace(/\.00$/,'');
        $(`section.Product`).on("variant:changed", function(e){
          console.log(e);
          console.log("variant changed pwy");
          let variant = e.originalEvent.detail.variant;
          let xid = variant.id;
          //         $('.ProductForm__Option [type="radio"]').on("change",function(){
          console.log(slider);
          if ( slider.slider( "instance" ) != undefined ){
            slider.slider("destroy");
          }
           //let xid = productSelect.val();
          
          console.log(xid);
          console.log(variant);
          var size_title = variant.title;
          size_title = size_title.substr(0,size_title.indexOf(' '));
          console.log(size_title);
          var product_sizes = '{{sizes_count}}';
          if(product_sizes == 3)
          {
            if(size_title.toLowerCase() == 'x-large')
            {
              $(".medium").addClass('s_circle__sep-right');
              $(".x-large").removeClass('s_circle__sep-left');
            }
            if(size_title.toLowerCase() == 'medium')
            {
              $(".x-large").addClass('s_circle__sep-left');
              $(".medium").removeClass('s_circle__sep-right');
            }
            if(size_title.toLowerCase() == 'large')
            {
              $(".x-large").removeClass('s_circle__sep-left');
              $(".medium").removeClass('s_circle__sep-right');
            }
          }
          if ( variant.available ){
            console.log("Hello variant changed!!!");
            xVariantPrice = Math.round(Currency.convert(xVariants[xid].price, 'USD', newCurrency));
            xVariantCompare_at_price = Math.round(Currency.convert(xVariants[xid].compare_at_price, 'USD', newCurrency));
            slider.slider({
              range: "min",
              min: xVariantPrice,
              max: maxPrice,
              step: 100,
              value: xVariantPrice,
              slide: function(e, ui){
                $("#xs-currentVal").html((Shopify.formatMoney(ui.value, xs_format)).replace(/\.00$/,'')); 
                changeMarksState(ui.value);
                return;
              }
            });

            slider.slider("widget").find(".ui-slider-handle").first().append(arrows);
            $("#xs-currentVal").html((Shopify.formatMoney(xVariantPrice, xs_format)).replace(/\.00$/,'')); 
            $("#compare_at_price_style").html((Shopify.formatMoney(xVariantCompare_at_price, xs_format)).replace(/\.00$/,'')); 
        	  cm_at_price = (Shopify.formatMoney(xVariantCompare_at_price, xs_format)).replace(/\.00$/,'');
            cm_at_price_to_pass = (Shopify.formatMoney(xVariants[xid].compare_at_price, "{{ shop.money_format }}")).replace(/\.00$/,'');
            
            xspw.show();

            var minimum_price = xVariantPrice / 100;
            var maximum_price = maxPrice;
            maximum_price = maximum_price/100;
            var diff_in_price = maximum_price - minimum_price;
            var mark_1_price = $("#mark-1").data("mark-amount");
            var mark_2_price = $("#mark-2").data("mark-amount");
            var mark_3_price = $("#mark-3").data("mark-amount");

            var left_mark_1 = ((mark_1_price - minimum_price)*100)/diff_in_price;
            var left_mark_2 = ((mark_2_price - minimum_price)*100)/diff_in_price;
            var left_mark_3 = ((mark_3_price - minimum_price)*100)/diff_in_price;

            $("#mark-1").css("left", left_mark_1 + "%" );
            $("#mark-2").css("left", left_mark_2 + "%" );
            $("#mark-3").css("left", left_mark_3 + "%" );
          }
          else{
            xspw.hide();
          }
          

          let payBtn = $(".ProductForm__AddToCart"),
              payBtnText = payBtn.find("span");

          payBtn.off("click").on('click',function(t) {
            $(payBtn).append( "<div class='cart-animation' style='display:none'>1</div>" );
            t.preventDefault();
            payBtnText.text("Adding ...");
            let price = parseInt(slider.slider("value"));
            price = price/100;
            let after_currency_convert = Math.round(Currency.convert(price, $('.CurrencySelector__Select').val(), 'USD'))
            let reqUrl = `https://custom-pricing-app-remix-6f3ca2abcf26.herokuapp.com/pay/${xs_product_id}/${productSelect.val()}/${ after_currency_convert * 100 }`;
            console.log(reqUrl);
            $.ajax({
              url: reqUrl,
              success: function(e){
                console.log(e);
                let data = { 
                  items: [
                    {
                      id: e.id,
                      quantity: 1,
                      properties: {
                        originalVariantId: e.original_variant_id,
                        _xs_pwyw_product : "{{ product.url }}",
                        _compare_at_price : cm_at_price_to_pass
                      }
                    }
                  ]};
                newFetch('/cart/add.js', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                  }, // *GET, POST, PUT, DELETE, etc.
                  body: JSON.stringify(data) // body data type must match "Content-Type" header
                 }).then(() => { 
                  Shopify.getCart((cart) => {
                    cart.cm_at_final_discount = parseInt(cm_at_final_discount)  +  parseInt(cm_at_price_to_pass.replace("$", "")); 
                    //console.log(cart);
                    $(".Header__CartDot").text(cart.item_count);
                    $(".Header__CartDot").addClass('is-visible');
                    var target = '#target__';
                    var animation = '.cart-animation';
                    $(animation).css({'display': 'block'});
                    if( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {
                      target = '#target__mobile';
                    }
                    var cart = $(target);
                    var imgtodrag = $(animation); 
                    if (imgtodrag) {
                        var imgclone = imgtodrag.clone()
                            .offset({
                            top: imgtodrag.offset().top,
                            left: imgtodrag.offset().left
                        })
                            .css({
                            'opacity': '1',
                                'position': 'absolute',
                                'z-index': '100'
                        })
                            .appendTo($('body'))
                            .animate({
                            'top': cart.offset().top + 10,
                                'left': cart.offset().left + 10
                        }, 1000, 'easeInOutExpo');
                        
                        setTimeout(function () {
                            cart.effect("shake", {
                                times: 2
                            }, 200);
                        }, 1500);

                        imgclone.animate({
                            'width': 0,
                            'height': 0
                        }, function () {
                            $(this).detach()
                        });
                      }
                    setTimeout(function(){
                      $(animation).css({'display': 'none'}); 
                    },1500);
                  });
                    payBtn.addClass('success_btn');
                    payBtnText.text(' ');
                    //from here all calculations for pricing in cart label
                    var price_header_ = $("#price_header_").html().replace(/\<span(.|\s)*?\<\/span\>/,'');
                    
                    price_header_ = Number(price_header_.replace(/[^0-9\.-]+/g,""));
                    if (isNaN(price_header_)) price_header_ = 0;
                    var cm_at_price_header_ = $("#cm_at_price_header_").html().replace(/\<span(.|\s)*?\<\/span\>/,'');
                    cm_at_price_header_ = Number(cm_at_price_header_.replace(/[^0-9\.-]+/g,""));
                    if (isNaN(cm_at_price_header_)) cm_at_price_header_ = 0;
                    
                    var product_price = price; 
                  
                    var updated_price_header_ = price_header_ + product_price;
                    var updated_cm_at_price_header_ = cm_at_price_header_ +  Number(cm_at_price.replace(/[^0-9\.-]+/g,""));
                    
                    var currency_symbol = cm_at_price.replace(/[\d\., ]/g, '');
                    if(newCurrency == 'SEK'){
                      updated_price_header_ = Math.round(updated_price_header_) +' '+ currency_symbol;
                      updated_cm_at_price_header_ = Math.round(updated_cm_at_price_header_) +' '+ currency_symbol;
                    }else{
                      updated_price_header_ = currency_symbol + Math.round(updated_price_header_);
                      updated_cm_at_price_header_ = currency_symbol + Math.round(updated_cm_at_price_header_);
                    }

                    $("#price_header_").html(updated_price_header_);
                    $("#cm_at_price_header_").html(updated_cm_at_price_header_);
                    $("#price_header").html(updated_price_header_);
                    $("#cm_at_price_header").html(updated_cm_at_price_header_);

                    //till here cart icon / label price calculations
                    setTimeout(function(){ 
                      payBtn.removeClass('success_btn');
                      payBtnText.text('Add to cart');
                      $('.delivery-message-text').hide();
                      $('.geotargetlygeocontent1629294920005').hide();
                      $('#add-to-cart-link').addClass('success').html('✓ Added to the cart! <a href="/cart"> View cart</a><br>');
                    }, 2000);
                  // location.href="/cart";
                })
              }
            });
          });
        });


        let payBtn = $("#xs-pay-btn,[data-action='add-to-cart']"),
            payBtnText = $(".add-to-cart__text");
        	payBtn.off("click").on('click',function(t) {
          t.preventDefault();
          payBtnText.text("Adding ...");
          let price = parseInt(slider.slider("value"));
          price = price/100;
          let after_currency_convert = Math.round(Currency.convert(price, $('.CurrencySelector__Select').val(), 'USD'));
          let reqUrl = `https://custom-pricing-app-remix-6f3ca2abcf26.herokuapp.com/pay/${xs_product_id}/${productSelect.val()}/${ after_currency_convert * 100 }`;
          console.log(reqUrl);
          $.ajax({
            url: reqUrl,
            success: function(e){
              console.log(e);
              let data = { 
                items: [
                  {
                    id: e.id,
                    quantity: 1,
                    properties: {
                      originalVariantId: e.original_variant_id,
                     _xs_pwyw_product : "{{ product.url }}",
                     _compare_at_price : cm_at_price_to_pass
                    }
                  }
                ]};
              newFetch('/cart/add.js', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                }, // *GET, POST, PUT, DELETE, etc.
                body: JSON.stringify(data) // body data type must match "Content-Type" header
              }).then(() => { 
                Shopify.getCart((cart) => {
                cart.cm_at_final_discount = parseInt(cm_at_final_discount)  +  parseInt(cm_at_price_to_pass.replace("$", "")); 
                
                $(".Header__CartDot").text(cart.item_count);
                $(".Header__CartDot").addClass('is-visible');
                var target = '#target__';
                var animation = '.cart-animation';
                $(animation).css({'display': 'block'});
                if( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {
                  target = '#target__mobile';
                }
                var cart = $(target);
                var imgtodrag = $(animation); 
                if (imgtodrag) {
                    var imgclone = imgtodrag.clone()
                        .offset({
                        top: imgtodrag.offset().top,
                        left: imgtodrag.offset().left
                    })
                        .css({
                        'opacity': '1',
                            'position': 'absolute',
                            'z-index': '100'
                    })
                        .appendTo($('body'))
                        .animate({
                        'top': cart.offset().top + 10,
                            'left': cart.offset().left + 10
                    }, 1000, 'easeInOutExpo');
                    
                    setTimeout(function () {
                        cart.effect("shake", {
                            times: 2
                        }, 200);
                    }, 1500);

                    imgclone.animate({
                        'width': 0,
                        'height': 0
                    }, function () {
                        $(this).detach()
                    });
                  }
                setTimeout(function(){
                  $(animation).css({'display': 'none'}); 
                },1500);
              });
                payBtn.addClass('success_btn');
                payBtnText.text(' ');
                //from here all calculations for pricing in cart label
                var price_header_ = $("#price_header_").html().replace(/\<span(.|\s)*?\<\/span\>/,'');
                price_header_ = Number(price_header_.replace(/[^0-9\.-]+/g,""));
                if (isNaN(price_header_)) price_header_ = 0;
                var cm_at_price_header_ = $("#cm_at_price_header_").html().replace(/\<span(.|\s)*?\<\/span\>/,'');
                cm_at_price_header_ = Number(cm_at_price_header_.replace(/[^0-9\.-]+/g,""));
                if (isNaN(cm_at_price_header_)) cm_at_price_header_ = 0;
                var product_price = price; 
                var updated_price_header_ = price_header_ + product_price;
                var updated_cm_at_price_header_ = cm_at_price_header_ + Number(cm_at_price.replace(/[^0-9\.-]+/g,""));
                
                var currency_symbol = cm_at_price.replace(/[\d\., ]/g, '');
                if(newCurrency == 'SEK'){
                  updated_price_header_ = Math.round(updated_price_header_) +' '+ currency_symbol;
                  updated_cm_at_price_header_ = Math.round(updated_cm_at_price_header_) +' '+ currency_symbol;

                }else{
                  updated_price_header_ = currency_symbol + Math.round(updated_price_header_);
                  updated_cm_at_price_header_ = currency_symbol + Math.round(updated_cm_at_price_header_);
                }
                $("#price_header").html(updated_price_header_);
                $("#price_header_").html(updated_price_header_);
                $("#cm_at_price_header").html(updated_cm_at_price_header_);
                $("#cm_at_price_header_").html(updated_cm_at_price_header_);
                
                //till here cart icon / label price calculations
                setTimeout(function(){ 
                  payBtn.removeClass('success_btn');
                  payBtnText.text('Add to cart');
                  $('.delivery-message-text').hide();
                  $('.geotargetlygeocontent1629294920005').hide();
                  $('#add-to-cart-link').addClass('success').html('✓ Added to the cart! <a href="/cart"> View cart</a><br>');
                }, 2000);
                // location.href="/cart";
              });
            }
          });
        });
      });
    </script>
    
    {% endunless %}

    

    {%- if section.settings.show_inventory_quantity -%}
      {%- assign hide_inventory_quantity_by_default = false -%}
      
      {%- if selected_variant.inventory_management == blank or selected_variant.inventory_quantity <= 0 -%}
        {%- assign hide_inventory_quantity_by_default = true -%}
      {%- endif -%}

      {%- if section.settings.inventory_quantity_threshold != 0 and selected_variant.inventory_quantity > section.settings.inventory_quantity_threshold -%}
        {%- assign hide_inventory_quantity_by_default = true -%}
      {%- endif -%}

      <p class="ProductForm__Inventory Text--subdued" {% if hide_inventory_quantity_by_default %}style="display: none"{% endif %}>
        {%- if section.settings.inventory_quantity_threshold == 0 -%}
          {{- 'product.form.inventory_quantity_count' | t: count: selected_variant.inventory_quantity -}}
        {%- else -%}
          {{- 'product.form.low_inventory_quantity_count' | t: count: selected_variant.inventory_quantity -}}
        {%- endif -%}
      </p>
    {%- endif -%}
  </div>

  {%- comment -%}
  --------------------------------------------------------------------------------------------------------------------
  ADD TO CART BUTTON
  --------------------------------------------------------------------------------------------------------------------
  {%- endcomment -%}

    {% unless template contains "paywhatyouwant" %}
  <button type="submit" class="ProductForm__AddToCart Button {% if selected_variant.available and section.settings.show_payment_button == false %}Button--primary{% else %}Button--secondary{% endif %} Button--full" {% if selected_variant.available %}data-action="add-to-cart"{% else %}disabled="disabled"{% endif %}>
    {%- if selected_variant.available -%}
      <span>{% if product.template_suffix == 'pre-order' %}{{ 'product.form.pre_order' | t }}{% else %}{{ 'product.form.add_to_cart' | t }}{% endif %}</span>

      {%- if section.settings.show_price_in_button -%}
        <span class="Button__SeparatorDot"></span>
        <span data-money-convertible>{{ selected_variant.price | money_without_trailing_zeros }}</span>
      {%- endif -%}
    {%- else -%}
      {{- 'product.form.sold_out' | t -}}
    {%- endif -%}
  </button>

  {%- if section.settings.show_payment_button and product.template_suffix != 'pre-order' -%}
    {{ form | payment_button }}
  {%- endif -%}
{% endunless %}
{%- endform -%}

{%- if size_chart_page != empty -%}
  {%- comment -%}If we have a size chart we capture the modal content (it must be displayed outside the form for proper positioning){%- endcomment -%}

  {%- capture product_modals -%}
    <div id="modal-{{ size_chart_page.handle }}" class="Modal Modal--dark Modal--fullScreen Modal--pageContent" aria-hidden="true" role="dialog" data-scrollable>
      <header class="Modal__Header">
        <h2 class="Modal__Title Heading u-h1">{{ size_chart_page.title }}</h2>
      </header>

      <div class="Modal__Content Rte">
        <div class="Container Container--extraNarrow">
          {{- size_chart_page.content -}}
        </div>
      </div>

      <button class="Modal__Close RoundButton RoundButton--large" data-animate-bottom data-action="close-modal">{% include 'icon' with 'close' %}</button>
    </div>
  {%- endcapture -%}
{%- endif -%}

{%- if section.settings.show_payment_button and selected_variant.available == false -%}
  <style>
    #shopify-section-{{ section.id }} .shopify-payment-button {
      display: none;
    }
  </style>
{%- endif -%}

{% comment %}
------------------------------------------------------------------------------
Product Data. This must be outputted for all products (including home page).

IMPORTANT: THIS CODE IS VITAL. DO NOT EDIT IT NOT REMOVE IT. MAKE SURE TO KEEP
THE EXACT SAME ATTRIBUTES.
------------------------------------------------------------------------------
{% endcomment %}

<script type="application/json" data-product-json>
  {
    "product": {{ product | json }},
    "selected_variant_id": {{ selected_variant.id }}
    {%- if section.settings.show_inventory_quantity -%}
      ,"inventories": {
        {%- for variant in product.variants -%}
          {%- assign inventory_message = '' -%}

          {%- if section.settings.inventory_quantity_threshold == 0 -%}
            {%- capture inventory_message -%}{{- 'product.form.inventory_quantity_count' | t: count: variant.inventory_quantity -}}{%- endcapture -%}
          {%- else -%}
            {%- capture inventory_message -%}{{- 'product.form.low_inventory_quantity_count' | t: count: variant.inventory_quantity -}}{%- endcapture -%}
          {%- endif -%}

          "{{ variant.id }}": {
            "inventory_management": {{ variant.inventory_management | json }},
            "inventory_policy": {{ variant.inventory_policy | json }},
            "inventory_quantity": {{ variant.inventory_quantity | json }},
            "inventory_message": {{ inventory_message | json }}
          }{% unless forloop.last %},{% endunless %}
        {%- endfor -%}
      }
    {%- endif -%}
  }
</script>
<script>


        jQuery.Ready
        	jQuery(function() {
        jQuery('.acc__title').click(function(j) {
            
            var dropDown = jQuery(this).closest('.acc__card').find('.acc__panel');
            jQuery(this).closest('.acc').find('.acc__panel').not(dropDown).slideUp();
            
            if (jQuery(this).hasClass('active')) {
            jQuery(this).removeClass('active');
            } else {
            jQuery(this).closest('.acc').find('.acc__title.active').removeClass('active');
            jQuery(this).addClass('active');
            }
            
            dropDown.stop(false, true).slideToggle();
            j.preventDefault();
        });
          
        });
  
  		

</script>